#pragma once
#include <CoreLayer/Math/Math.h>
#include <CoreLayer/Utils.h>

#include <iostream>
#include <ostream>
//* 使用RGB三通道颜色空间

class SpectrumRGB {
public:
    SpectrumRGB() : rgb(0.f) {}

    SpectrumRGB(float f) : rgb(f) {}

    SpectrumRGB(float r, float g, float b) : rgb(r, g, b) {}

    SpectrumRGB(Vector3f _rgb) : rgb(_rgb) {}

    SpectrumRGB operator+(const SpectrumRGB &rhs) const {
        return SpectrumRGB(rgb + rhs.rgb);
    }

    SpectrumRGB &operator+=(const SpectrumRGB &rhs) {
        rgb += rhs.rgb;
        return *this;
    }

    SpectrumRGB operator-(const SpectrumRGB &rhs) const {
        return SpectrumRGB(rgb - rhs.rgb);
    }

    SpectrumRGB &operator-=(const SpectrumRGB &rhs) {
        rgb -= rhs.rgb;
        return *this;
    }

    SpectrumRGB operator*(const SpectrumRGB &rhs) const {
        return SpectrumRGB(rgb * rhs.rgb);
    }

    SpectrumRGB &operator*=(const SpectrumRGB &rhs) {
        rgb *= rhs.rgb;
        return *this;
    }

    SpectrumRGB operator*(float f) const { return SpectrumRGB(rgb * f); }

    SpectrumRGB &operator*=(float f) {
        rgb *= f;
        return *this;
    }

    SpectrumRGB operator/(const SpectrumRGB &rhs) const {
        return SpectrumRGB(rgb / rhs.rgb);
    }

    SpectrumRGB &operator/=(const SpectrumRGB &rhs) {
        rgb /= rhs.rgb;
        return *this;
    }

    SpectrumRGB operator/(float f) const { return SpectrumRGB(rgb / f); }

    SpectrumRGB &operator/=(float f) {
        rgb /= f;
        return *this;
    }

    float operator[](int i) const { return rgb[i]; }

    float &operator[](int i) { return rgb[i]; }

    bool isZero() const { return rgb.isZero(); }

    void debugPrint() const {
        printf("[rgb](");
        for (int i = 0; i < 3; ++i) {
            std::cout << (i == 0 ? '\0' : ',') << rgb[i];
        }
        printf(")%c", '\n');
        fflush(stdout);
    }

    static int cntChannel() { return 3; }

    static SpectrumRGB blackBody(float t) {
        if (t <= 0) {
            return SpectrumRGB(0.0f);
        }
        const float *s1 = nullptr, *s2 = nullptr;
        float c = 1.0f;
        if (t >= blackbody_highest_temperature) {
            s1 = blackbody_table[blackbody_table_max_index];
            s2 = s1;
            c = 1.0f;
        } else {
            int idx = t / blackbody_step_size;
            int idx2 = idx + 1;
            c = t / blackbody_step_size - idx;
            s1 = blackbody_table[idx];
            s2 = blackbody_table[idx2];
        }
        float r = s1[0] + c * (s2[0] - s1[0]), g = s1[1] + c * (s2[1] - s1[1]),
              b = s1[2] + c * (s2[2] - s1[2]);
        return SpectrumRGB(r, g, b);
    }

private:
    static constexpr float blackbody_table[][3] = {
        {0.0, 0.0, 0.0},
        {3.884807387278206e-75, -4.2213374023827593e-76,
         -2.6091241747206567e-77},
        {6.6397888197395605e-37, -7.21490876020439e-38, -4.459515020725815e-39},
        {1.1139687625815974e-23, -1.2059057993077572e-24,
         -7.538624792601123e-26},
        {1.3971894542147655e-16, -1.4481189369826652e-17,
         -1.0255520947726915e-18},
        {4.713194381923347e-12, -4.3594745668220553e-13,
         -4.1092881078421953e-14},
        {6.287860371455172e-09, -4.827040398346214e-10, -6.691546162714129e-11},
        {1.191367738700279e-06, -6.913672589633753e-08, -1.533913795986454e-08},
        {6.40303978279593e-05, -2.381243278413397e-06, -9.753124708134025e-07},
        {0.0014596795555848034, -2.1651890483381037e-05,
         -2.5586643719615425e-05},
        {0.018094610714823385, 0.0001557864638571948, -0.0003541993110514076},
        {0.1433148151579503, 0.004703090171082871, -0.003034825988121136},
        {0.8088390455278637, 0.04653822196042297, -0.017912091623545096},
        {3.5111050596482136, 0.2899257185006324, -0.07834219988858107},
        {12.386838597010042, 1.334929874242545, -0.2666853486944127},
        {36.99081979407975, 4.919759255118806, -0.7277879411053572},
        {96.4258837460271, 15.250800960580698, -1.6058270641588175},
        {224.660048497098, 41.151507632974585, -2.7852600017066926},
        {476.55689973183433, 99.10846442517065, -3.270950058376723},
        {933.9470121050686, 217.13676028329792, -0.027727036411469896},
        {1711.0263462105252, 439.23262462720766, 13.872326961122894},
        {2958.4686659077797, 830.0684465204902, 51.878436950496535},
        {4865.833308888539, 1479.5348028361916, 137.35574495470513},
        {7662.078497442261, 2506.747292040012, 307.63785406431083},
        {11614.205269757718, 4063.1998320895605, 618.5447069009024},
        {17024.22758511334, 6334.840981570197, 1149.1154163432745},
        {24224.77760454703, 9542.955896752828, 2006.280053007079},
        {33573.712442067226, 13943.837621423676, 3329.199860183525},
        {45448.098767277406, 19827.316768667788, 5293.036298087203},
        {60237.92689838799, 27514.28281732271, 8111.957840902452},
        {78339.8590243027, 37353.371993277164, 12041.251330446219},
        {100151.25783192572, 49717.01775476172, 17378.464635065255},
        {126064.6805208229, 64997.063650624805, 24463.56370121674},
        {156462.96483759658, 83600.1288535579, 33678.13597282706},
        {191714.9819764655, 105942.89805433778, 45443.71144808191},
        {232172.0877970239, 132447.4832696777, 60219.30160856691},
        {278165.26932458614, 163536.97845252734, 78498.2753999288},
        {330002.95757008455, 199631.300886609, 100804.70136764145},
        {387969.45946108236, 241143.38782143002, 127689.28734834696},
        {452323.9499806883, 288475.79371119355, 159725.04533435675},
        {523299.95925983373, 342017.71334784396, 197502.8008004296},
        {601105.2871970813, 402142.4393569703, 241626.654318703},
        {685922.2791382048, 469205.24893239717, 292709.4899146664},
        {777908.3993312293, 543541.7041264274, 351368.6103473265},
        {877197.0435330574, 625466.3421891909, 418221.5651291811},
        {983898.5376834859, 715271.72701031, 493882.22323606536},
        {1098101.2755194395, 813227.8292909132, 578957.1295166637},
        {1219872.95403285, 919581.7013047442, 674042.1720713943},
        {1349261.8715338157, 1034557.4116599459, 779719.5774841894},
        {1486298.2586004708, 1158356.2060490355, 896555.2418180053},
        {1630995.6172749205, 1291156.8613130047, 1025096.3977140731},
        {1783352.0484447037, 1433116.2020260221, 1165869.61170367},
        {1943351.5514115356, 1584369.7510464066, 1319379.1008533016},
        {2110965.283198774, 1745032.4879296345, 1486105.3540023994},
        {2286152.768208167, 1915199.6916427459, 1666504.0399895562},
        {2468863.051439621, 2094947.8465662962, 1861005.1832691506},
        {2659035.7906740764, 2284335.5932526216, 2070012.5860675948},
        {2856602.284832279, 2483404.7077789507, 2293903.475597962},
        {3061486.4372058064, 2692181.095757745, 2533028.3547323854},
        {3273605.653450038, 2910675.7891246947, 2787711.034823611},
        {3492871.6751763467, 3138885.935704462, 3058248.8299823343},
        {3719191.3507129746, 3376795.7732546944, 3344912.8929778337},
        {3952467.345159458, 3624377.581209515, 3647948.673969932},
        {4192598.7922635055, 3881592.6046932805, 3967576.484444407},
        {4439481.890928994, 4148391.946561262, 4303992.149965054},
        {4693010.449342938, 4424717.424257864, 4657367.736634745},
        {4953076.379804013, 4710502.389177085, 5027852.337444991},
        {5219570.147367248, 5005672.506974893, 5415572.905963575},
        {5492381.175395893, 5310146.49793487, 5820635.126043841},
        {5771398.211051594, 5623836.837034143, 6243124.307423846},
        {6056509.653661075, 5946650.413812938, 6683106.298207434},
        {6347603.848784566, 6278489.1525240205, 7140628.406276743},
        {6644569.350681249, 6619250.593342443, 7615720.322671332},
        {6947295.1557282545, 6968828.4356563315, 8108395.040882303},
        {7255670.909204316, 7327113.0446477225, 8618649.7668488},
        {7569587.087702469, 7693991.92251435, 9146466.81521199},
        {7888935.159289501, 8069350.145785377, 9691814.488077769},
        {8213607.723384313, 8453070.770254917, 10254647.933169963},
        {8543498.632188983, 8845035.205097705, 10834909.978821266},
        {8878503.095370628, 9245123.55774992, 11432531.943754777},
        {9218517.769561745, 9653214.951139119, 12047434.420059033},
        {9563440.834127594, 10069187.81482836, 12679528.028156912},
        {9913172.054529447, 10492920.151613556, 13328714.142918944},
        {10267612.83450724, 10924289.781072618, 13994885.59037679},
        {10626666.258201744, 11363174.561519295, 14677927.314759076},
        {10990237.123241533, 11809452.591762554, 15377717.015800958},
        {11358231.965732815, 12263002.39401578, 16094125.75647532},
        {11730559.07800686, 12723703.07924115, 16827018.541460525},
        {12107128.519905202, 13191434.49615367, 17576254.866800483},
        {12487852.124312827, 13666077.365048077, 18341689.24132946},
        {12872643.497584268, 14147513.397549482, 19123171.680530194},
        {13261418.015449818, 14635625.403329268, 19920548.173570912},
        {13654092.81493265, 15130297.384765884, 20733661.124328487},
        {14050586.782760251, 15631414.620474048, 21562349.767251108},
        {14450820.540705541, 16138863.738567902, 22406450.558948196},
        {14854716.428252507, 16652532.7804698, 23265797.546418738},
        {15262198.482943622, 17172311.25602415, 24140222.71284227},
        {15673192.4187296, 17698090.19062551, 25029556.30186396},
        {16087625.602612035, 18229762.165023763, 25933627.12130235},
        {16505427.029838711, 18767221.348421425, 26852262.827202946},
        {16926527.29788816, 19310363.525438193, 27785290.189147417}};
    static constexpr int blackbody_step_size = 100;
    static constexpr int blackbody_table_max_index =
        sizeof(blackbody_table) / (sizeof(float) * 3) - 1;
    static constexpr int blackbody_highest_temperature =
        blackbody_table_max_index * blackbody_step_size;

    Vector3f rgb;
};

inline SpectrumRGB operator*(float f, const SpectrumRGB &spectrum) {
    return spectrum * f;
}

inline Vector3f toVec3(const SpectrumRGB &spectrum) {
    return Vector3f{spectrum[0], spectrum[1], spectrum[2]};
}

inline SpectrumRGB toSpectrum(const Vector3f &vec) {
    return SpectrumRGB(vec[0], vec[1], vec[2]);
}